Create database TaxiFare;

use TaxiFare;

show tables;

describe taxifare;

select*from taxifare;

#  1.Total revenue generated:

SELECT SUM(amount) AS total_revenue FROM taxifare;

# 2.Number of trips per passenger count:

SELECT no_of_passenger, COUNT(*) AS trip_count 
FROM taxifare 
GROUP BY no_of_passenger 
ORDER BY trip_count DESC;

# 3.Trips with the highest fare amount:

SELECT * 
FROM taxifare 
ORDER BY amount DESC 
LIMIT 10;

# 4.Average fare amount by passenger count:

SELECT no_of_passenger, AVG(amount) AS average_fare 
FROM taxifare 
GROUP BY no_of_passenger 
ORDER BY average_fare DESC;

# 5.Trips occurring during peak hours (7 AM - 9 AM and 5 PM - 7 PM):

SELECT COUNT(*) AS peak_hour_trips 
FROM taxifare 
WHERE (HOUR(STR_TO_DATE(date_time_of_pickup, '%Y-%m-%d %H:%i:%s')) BETWEEN 7 AND 9) 
   OR (HOUR(STR_TO_DATE(date_time_of_pickup, '%Y-%m-%d %H:%i:%s')) BETWEEN 17 AND 19);

# 6.Identify outliers in the fare amount (e.g., trips with fare > $500):

SELECT * 
FROM taxifare 
WHERE amount > 50;


# 7.Longest trip based on geographical coordinates (Haversine distance):

SELECT unique_id, 
       (3959 * ACOS(COS(RADIANS(latitude_of_pickup)) 
                  * COS(RADIANS(latitude_of_dropoff)) 
                  * COS(RADIANS(longitude_of_dropoff) - RADIANS(longitude_of_pickup)) 
                  + SIN(RADIANS(latitude_of_pickup)) 
                  * SIN(RADIANS(latitude_of_dropoff)))) AS distance 
FROM taxifare 
ORDER BY distance DESC 
LIMIT 1;

# 8.Daily revenue trends:

SELECT DATE(STR_TO_DATE(date_time_of_pickup, '%Y-%m-%d %H:%i:%s')) AS trip_date, 
       SUM(amount) AS daily_revenue 
FROM taxifare 
GROUP BY trip_date 
ORDER BY trip_date;

# 9.Most frequent pickup and dropoff locations:

SELECT longitude_of_pickup, latitude_of_pickup, COUNT(*) AS pickup_count 
FROM taxifare 
GROUP BY longitude_of_pickup, latitude_of_pickup 
ORDER BY pickup_count DESC 
LIMIT 10;

SELECT longitude_of_dropoff, latitude_of_dropoff, COUNT(*) AS dropoff_count 
FROM taxifare 
GROUP BY longitude_of_dropoff, latitude_of_dropoff 
ORDER BY dropoff_count DESC 
LIMIT 10;

# 10.Trips during weekends vs. weekdays:

SELECT CASE 
         WHEN WEEKDAY(STR_TO_DATE(date_time_of_pickup, '%Y-%m-%d %H:%i:%s')) IN (5, 6) THEN 'Weekend' 
         ELSE 'Weekday' 
       END AS day_type, 
       COUNT(*) AS trip_count 
FROM taxifare 
GROUP BY day_type;


# 11.Top 5 dates with the highest total revenue:

SELECT DATE(STR_TO_DATE(date_time_of_pickup, '%Y-%m-%d %H:%i:%s')) AS trip_date, 
       SUM(amount) AS total_revenue 
FROM taxifare 
GROUP BY trip_date 
ORDER BY total_revenue DESC 
LIMIT 5;

# 12.Trips with more than 3 passengers and fare above $50:

SELECT * 
FROM taxifare 
WHERE no_of_passenger > 3 AND amount > 50;

# 13.Hourly distribution of trips:

SELECT HOUR(STR_TO_DATE(date_time_of_pickup, '%Y-%m-%d %H:%i:%s')) AS trip_hour, 
       COUNT(*) AS trip_count 
FROM taxifare 
GROUP BY trip_hour 
ORDER BY trip_hour;

# 14. Average fare amount per trip distance bucket (short, medium, long):
# Assuming distances are pre-calculated in buckets:

SELECT CASE 
         WHEN distance <= 2 THEN 'Short (<=2 miles)' 
         WHEN distance > 2 AND distance <= 5 THEN 'Medium (2-5 miles)' 
         ELSE 'Long (>5 miles)' 
       END AS distance_category, 
       AVG(amount) AS average_fare 
FROM (
      SELECT *, 
             (3959 * ACOS(COS(RADIANS(latitude_of_pickup)) 
                      * COS(RADIANS(latitude_of_dropoff)) 
                      * COS(RADIANS(longitude_of_dropoff) - RADIANS(longitude_of_pickup)) 
                      + SIN(RADIANS(latitude_of_pickup)) 
                      * SIN(RADIANS(latitude_of_dropoff)))) AS distance 
      FROM taxifare
     ) AS trips 
GROUP BY distance_category;

# 15. Most expensive trip per passenger count:

SELECT no_of_passenger, MAX(amount) AS max_fare 
FROM taxifare 
GROUP BY no_of_passenger 
ORDER BY max_fare DESC;

# 16.Trips with identical pickup and dropoff locations:

SELECT * 
FROM taxifare 
WHERE longitude_of_pickup = longitude_of_dropoff 
  AND latitude_of_pickup = latitude_of_dropoff;

# 17.Trips with multiple passengers but a fare below the average fare:

SELECT * 
FROM taxifare 
WHERE no_of_passenger > 1 
  AND amount < (SELECT AVG(amount) FROM taxifare);

# 18.Revenue generated by each unique pickup location:

SELECT longitude_of_pickup, latitude_of_pickup, 
       SUM(amount) AS total_revenue 
FROM taxifare 
GROUP BY longitude_of_pickup, latitude_of_pickup 
ORDER BY total_revenue DESC 
LIMIT 10;

# 19.Identify trips with an unusually high fare for the distance traveled:

WITH TripDetails AS (
    SELECT *, 
           (3959 * ACOS(COS(RADIANS(latitude_of_pickup)) 
                    * COS(RADIANS(latitude_of_dropoff)) 
                    * COS(RADIANS(longitude_of_dropoff) - RADIANS(longitude_of_pickup)) 
                    + SIN(RADIANS(latitude_of_pickup)) 
                    * SIN(RADIANS(latitude_of_dropoff)))) AS distance
    FROM taxifare
)
SELECT *, 
       (amount / distance) AS fare_per_mile
FROM TripDetails
WHERE (amount / distance) > 100
  AND distance > 0;

# 20. Trips with the longest travel time:

WITH TravelTime AS (
    SELECT *,
           TIMESTAMPDIFF(MINUTE, latitude_of_pickup,latitude_of_dropoff) AS travel_time_minutes
    FROM taxifare
)
SELECT * 
FROM TravelTime
ORDER BY travel_time_minutes DESC 
LIMIT 10;





# 21.Monthly trends in the number of trips:
SELECT DATE_FORMAT(STR_TO_DATE(date_time_of_pickup, '%Y-%m-%d %H:%i:%s'), '%Y-%m') AS trip_month, 
       COUNT(*) AS trip_count 
FROM taxifare 
GROUP BY trip_month 
ORDER BY trip_month;

# 22.Top 10 dropoff locations by fare amount:

SELECT longitude_of_dropoff, latitude_of_dropoff, 
       SUM(amount) AS total_revenue 
FROM taxifare 
GROUP BY longitude_of_dropoff, latitude_of_dropoff 
ORDER BY total_revenue DESC 
LIMIT 10;

# 23.Average distance traveled by trip based on the number of passengers:

SELECT no_of_passenger, 
       AVG(3959 * ACOS(COS(RADIANS(latitude_of_pickup)) 
                     * COS(RADIANS(latitude_of_dropoff)) 
                     * COS(RADIANS(longitude_of_dropoff) - RADIANS(longitude_of_pickup)) 
                     + SIN(RADIANS(latitude_of_pickup)) 
                     * SIN(RADIANS(latitude_of_dropoff)))) AS average_distance 
FROM taxifare 
GROUP BY no_of_passenger 
ORDER BY average_distance DESC;



